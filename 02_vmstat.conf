#### Logstash Conf for Exaw IoStat
#### Author   Date
#    =================================================================
#    dongwkim 2017/03/01 Create
#    dongwkim 2017/04/08 Enable Multiline
#    dongwkim 2017/04/11 Split intput by source, Need to split by type

filter {

#### VMSTAT Parse
if [source] == "/var/celllog/vmstat.log" {

    if [message] =~ /^(#\sSample|#\sArchive|#\sCollection|#####|--time)/ {
        drop { }
    }
    mutate {
        add_field => { "taskId" => "VmStat" }
    }
    if [message] =~ /^(#\sStarting|My Hostname)/ {
        grok {
            patterns_dir => "./patterns"
            match => { "message" => "My\sHostname\sis\s%{GREEDYDATA:hostname}" }
            add_tag => ["hostname line"]
        }
        grok {
            patterns_dir => "./patterns"
            match => { "message" => "\#\sStarting\sTime:%{SPACE}%{DATE_US:logday} %{GREEDYDATA:inittime}" }
            add_tag => ["logday line"]
        }
    }
    grok {
        patterns_dir => "./patterns"
        match => { "message" => "%{GREEDYDATA:logtime}%{SPACE}%{NUMBER:procs_r}%{SPACE}%{NUMBER:procs_b}%{SPACE}%{NUMBER:mem_swpd}%{SPACE}%{NUMBER:mem_free}%{SPACE}%{NUMBER:mem_buff}%{SPACE}%{NUMBER:mem_cache}%{SPACE}%{NUMBER:swap_si}%{SPACE}%{NUMBER:swap_so}%{SPACE}%{NUMBER:io_bi}%{SPACE}%{NUMBER:io_bo}%{SPACE}%{NUMBER:system_in}%{SPACE}%{NUMBER:system_cs}%{SPACE}%{NUMBER:cpu_us}%{SPACE}%{NUMBER:cpu_sys}%{SPACE}%{NUMBER:cpu_id}%{SPACE}%{NUMBER:cpu_wait}%{SPACE}%{NUMBER:cpu_steal}" }
        tag_on_failure => ["candidate_to_drop"]
    }
    if "hostname line" in [tags] {
        aggregate {
            task_id => "%{taskId}"
            code => "map['hostname'] = event.get('hostname')"
        }
        drop { }
    }
    if "logday line" in [tags] {
        aggregate {
            task_id => "%{taskId}"
            code => "map['logday'] = event.get('logday')"
        }
        drop { }
    }

    if "candidate_to_drop" in [tags] {
        drop { }
    }
    aggregate {
        task_id => "%{taskId}"
        code =>  "event.set('logday', map['logday'])"
        map_action => "update"
    }
    aggregate {
        task_id => "%{taskId}"
        code => "event.set('hostname', map['hostname'])" 
        map_action => "update"
    }
    mutate {
        convert => { "procs_r" => "integer" }
        convert => { "procs_b" => "integer" }
        convert => { "mem_swpd" => "integer" }
        convert => { "mem_free" => "integer" }
        convert => { "mem_buff" => "integer" }
        convert => { "mem_cache" => "integer" }
        convert => { "swap_si" => "integer" }
        convert => { "swap_so" => "integer" }
        convert => { "io_bi" => "integer" }
        convert => { "io_bo" => "integer" }
        convert => { "system_in" => "integer" }
        convert => { "system_cs" => "integer" }
        convert => { "cpu_us" => "integer" }
        convert => { "cpu_sys" => "integer" }
        convert => { "cpu_id" => "integer" }
        convert => { "cpu_wait" => "integer" }
        convert => { "cpu_steal" => "integer" }
        strip => [ "logtime" ]
        add_field => { "timestamp" => "%{logday} %{logtime} +0900" }
    }
    date {
        match => [ "timestamp","MM/dd/yyyy HH:mm:ss Z" ]
        target => "@timestamp"
    }
  }
}
