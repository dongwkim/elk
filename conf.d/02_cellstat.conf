#### Logstash Conf for Exaw IoStat
#### Author   Date
#    =================================================================
#    dongwkim 2017/03/01 Create
#    dongwkim 2017/04/08 Enable Multiline
#    dongwkim 2017/04/11 Split intput by source, Need to split by type

filter {
### CELLSTAT Parse
#if [source] == "/var/celllog/cellstat.log" {
if [path] == "/es/archive/cellstat.log" {

    if [message] =~ /^(#|\s|==\s)/ {
        drop { }
    }
    mutate {
        add_field => { "taskId" => "CellStat" }
    }
    grok {
        patterns_dir => "./patterns"
        match => { "message" => "zzz%{SPACE}\<%{DATE_US:logday} %{GREEDYDATA:dummy}" }
        add_tag => ["day_line"]
    }
    grok {
        patterns_dir => "./patterns"
        match => { "message" => "My\sHostname\sis\s%{GREEDYDATA:hostname}" }
        add_tag => ["host_line"]
    }

    grok {
        patterns_dir => "./patterns"
        match => { "message" => "===Current Time===%{SPACE}%{GREEDYDATA:ctime}%{TIME:logtime}%{SPACE}%{WORD:year}" }
        add_tag => ["time_line"]
    }
    if "day_line" in [tags] {
        aggregate {
            task_id => "%{taskId}"
            code => "map['logday'] = event.get('logday')"
        }
        drop { }
    }
    else if "time_line" in [tags] {
        aggregate {
            task_id => "%{taskId}"
            code => "map['logtime'] = event.get('logtime')"
        }
        drop { }
    }
    else if "host_line" in [tags] {
        aggregate {
            task_id => "%{taskId}"
            code => "map['hostname'] = event.get('hostname')"
        }
        drop { }
    }
    else {
        if '(KB)' not in [message] {
            drop { }
        }
        grok {
            patterns_dir => "./patterns"
            match => { "message" => "%{GREEDYDATA:metric}%{SPACE}%{NUMBER:real_value}%{SPACE}%{NUMBER:cumm_value}" }
        }
        aggregate {
            task_id => "%{taskId}"
            code =>  "event.set('logday', map['logday'])"
            map_action => "update"
        }
        aggregate {
            task_id => "%{taskId}"
            code => "event.set('hostname', map['hostname'])" 
            map_action => "update"
        }
        aggregate {
            task_id => "%{taskId}"
            code => "event.set('logtime', map['logtime'])" 
            map_action => "update"
        }
        mutate {
            strip => [ "metric" ]
            convert => { "real_value" => "integer" }
            convert => { "cumm_value" => "integer" }
            add_field => { "timestamp" => "%{logday} %{logtime} +0900" }
        }
        mutate {
            rename => { "real_value" => "%{metric}" }
#            remove_field => [ "metric" ]
            remove_field => [ "message" ]
            remove_field => [ "logday" ]
#            remove_field => [ "logtime" ]
            remove_tag => [ "_grokparsefailure" ]
        }
    }
    date {
        match => [ "timestamp","MM/dd/yyyy HH:mm:ss Z" ]
        target => "@timestamp"
    }
  }
}
